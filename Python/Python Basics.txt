Variables:
defining a variable:
num = 123

Python data bases: 
    Numeric data bases: 
        - int
        - float
        - complex numbers

    String:
        a sequence of chars, definded by quotation marks. Example:
        name = "Nadav"
        
        String Functions:
        print(f"{name}") -> will print Nadav. This is called an f-string, and it is used for using variables inside strings in a more comfortable manner.

    Booleans:
        True or false.

    Lists: 
        Quite literally, a list of items. The items have an order and are contained in the data type called a list. The list is defined with hard brackets. Example:
        lst=["item1","item2","item3"]

        List Functions:
        lst[i] - returns the value in location i
        len(lst) - returns the length of the list
        lst.append(var) - pushed the object into place 0 in the list and pushed the other objects respectfully.
        lst.remove(var) - removes the object from the list
        lastItem=lst.pop() - assigns the value of the last item from the list to lastItem and deletes it from lst.
        print ([1,2]+[3]) -> [1,2,3]
        print (1 in [1,2,3]) -> True
        lst[x:y] -> Returns a list that consists of lst's items from index x to the yth index. (If lst=[1,2,3,4,5], lst[0:3] returns [1,2,3])
        max(lst) - returs the highest value in the list.
        min(lst) - returns the lowest value in the list.
        sorted(lst) - sorts the list from smallest to biggest.
        sum(lst) - returns the sum of the list, relevant to numbers. 
        L = list(str) - turns string into a list
        str = "".join(list) - turns a list into a string

    Tuples:
        Basically a const list, defined with parentheses.
        tup = ("item1", "item2", "item3")
        Tupels cant be appended, removed or popped. The only way to add or remove items from them is to create a new one and to add or remove items from it.
        A tuple will always maintain its order, as opposed to other data types.

    Sets:
        Similar to lists and items in the sense they have lists of items. They are mutable and fore unique data, meaning you can't have duplicates of the same item in the set. Defined with curly brackets. 
        set={"value1","value2","value3"}
        Sets dont keep the order of the values.
        set.add("value4") -> adds value4 to the set. It's add and not append because it doesnt insert it to a specific place, since it doesn't keep an order.

    Dictionaries:
        dictName={
            "key1":"value1",
            "key2':"value2",
            "key3":"value3"
        }
        print(dictName["key1"]) -> Will print "value1".
        dictName["key4"]="value4" -> Adds a new key to the dictionary and assigns a value to it.
        del dictName["key4"] -> Deletes the key from the dictionary.
        dictName.keys() -> Returns a list of the keys in the dictionary.
        dictName.values() -> Returns a list of the values in the dictionary.
        dictName.get(insertedKey) -> receives a key and returns the value of the key given, in this case the variable "insertedKey". Returns None in case of invalid key.
        dictName.items() -> Returns a list of the dictionary content in the form of [("key1","value1"),("key2","value2"),("key3","value3")].

    None: 
        None.

Files:
with open("file_name.txt","w") as f:
    f.write("text") -> Writes to the file
with open ("file_name.txt", "r") as f:
    print (type(f))

Comparison Operators:
    =, ==, <, >, <=, >=, blah blah blah.
    New thing! the is operator. Looks for the exact value compared. Example: 
    
    var = None
    if var == None -> Checks for equaity between the values.
    if var is None -> Looks for an exact location in the memory dedicated to the value of var, something that is literally the exact same thing.

Loops:
    - For: 
        for item in sequence:
            ...
        Unpacking a tuple of tupels:
            people = (
                (22,"Nadav"),
                (24,"Rom"),
                (23,"Yonatan")
            )
            print(people)
            for age, name in people:
                print (f"{name} is {age} years old")
        Unpacking a dictionary:
            nadav={
                "Age":22,
                "Job":"Medic and security guard",
                "Currently on":"A train"
            }
            nadavTuple=nadav.items()
            for key,value in nadavTuple:
                print(f"{key}: {value}")
    - While:
        while condition:
            ...
    - Break and Continue:
        Continue - Skips the remainder of the iteration and starts a new one.
        Break - Breaks out of the loop
     
Helpful Operators:
    - in - A way to check whether an item is in a sequence. Example:
        if str in longerStr:
            pass 
    - enumerate - A way to get the loop iteration number. Example:
        for index,item in enumerate(lst):
            print(index+1,item) -> Will print the index (+1 because it starts from 0) and the item in the list.
    - Zipping - A way to merge 2 lists together into a paired tuple. Example:
        list1=['a','b','c']
        list2=[1,2,3]
        for letter,number in zip(list1,list2):
            print(letter,"=>",number). 
                   -> Will print: 
                   a => 1
                   b => 2
                   c => 3 
    - min(lst) - Returns the minimal value in the list
    - max(lst) - Returns the maximal value in the list
    - join() - Joins together items in a list with the string before, making a string. Example:
        list=['a','b','c']
        print("->".join(list)) -> prints a->b->c
    - split() - The opposite of join. Example:
        sentence = "I eat a banana"
        words = sentence.split(" ")
        print(words) -> will print ["I", "eat", "a", "banana"]
    - from random import shuffle 
      shuffle(words) - shuffles the list

List Comprehensions:
    A way to create lists using a for loop. Example:
        str = "Chair on the floor"
        strLst=[letter for letter in str]
        print(strLst) -> prints ['C', 'h', 'a', 'i', 'r', ' ', 'o', 'n', ' ', 't', 'h', 'e', ' ', 'f', 'l', 'o', 'o', 'r']    
    It can also be done with a condition:
        strLst=[letter for letter in str if letter.lower() in "chair"]
        print(strLst) -> prints ['C', 'h', 'a', 'i', 'r', 'h', 'r']
    Celsius to fahrenheit convertor using list comperhension:
        celsius=[-40,-20,1,10,15,25,35,50]
        f=[(temp*1.8)+32 for temp in celsius]
        print(f)        
    Dictionary Comprehensions:      
        keys=["name","age","role"]
        values=["Nadav",22,"Student"]
        person={key:value for key,value in zip(keys,values)}
        print(person)

Functions:
    def funcName():
        print("hello")  
    def function(var="value"): -> the default value is in the variable, changable if value in inserted into the function.
    
    def yourAge(age):
    age=int(age)
    print(f"You are {age} years old")
    age=input("What is your age? ")
    yourAge(age)

Args and Kwargs:
    Arguments and keyword arguments.
    Args (denoted with *) recive items and create a tuple, while kwargs (denoted with **) receive keys and values and create a dictionary. 
    Args example:
        def printTuple(*args):
            for arg in args:
                print (arg)
            print("The type of an argument is",type(args))
        printTuple("chair",22,True,77.4,False)
    Kwargs example:
        def printDict(**kwargs):
            for key,value in kwargs.items():
                print(f"{key}:{value}")
            print("The type of kwargs is",type(kwargs))
        printDict(name="Nadav",drink="Water",sport="Biking")
    
    you can enter as many args as you wish and same for kwargs. Example:
    def getDish(name,*dishes,**details):
        print (f"Hello {name}!")
        for dish in dishes:
            print(f"You ordered {dish}")
        address=details.get("address")
        if address:
            print(f"The order will be sent shortly to {address}")
        else:
            print("Enter an address you moron!")

    getDish("Nadav","Hamburger","Sushi",address="Hagilad 2 Netanya")

Mapping:
    A way to use a function on an iterable. Exmaple:
    numbers=[1,2,65,4.3]
    poweredNumbers=[]

    def powerOfTwo(num):
        return num**2
    
    for num in map(powerOfTwo,numbers): -> The function receives a function an an iterable and performs the function on it (In this case creates a list of the powered numbers).
        poweredNumbers.append(num)

    print(poweredNumbers)

    Another more efficient way:
    poweredNumbers=list(map(powerOfTwo,numbers))

Filter:
    A way to apply a function and to remove data that you don't want. The function only keeps the items that the function returned true about, and doesn't reassign them. It is very similar to the mapping syntax. Example:

    numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14]

    def filterEvenNumbers(num):
        return num%2==0
    for num in filter(filterEvenNumbers,numbers):
        print(num) -> Will print 2,4,6,8,10,12,14.
    
    Another way to write it:
        evens=list(filter(filterEvenNumbers,numbers))
        print(evens)    

Lambda Expressions (Anonymous Functions):
    A one time use function, mainly used for simple mathematic calculations. Example:
        add = lambda num1, num2: num1+num2
        print(add(1,2))

        powerOf=lambda num,power:num**power
        print(powerOf(2,3))
    
Objects (classes):
    Attributes and methods:

    
    Class Inheritance:
        A way to create a sub-class of a bigger one. Example:
        class Animal:
            def __init__(self,name,weight):
                self.name=name
                self.weight=weight
            def speak(self):
                print("Animal sound")

        class Cat(Animal):
            def speak(self):
                print("Meow")

        kvishi = Cat("Kvishi","10kg")
        kvishi.speak()

        class Dog(Animal):
            def speak(self):
                print("Woof Woof")

        shpits=Dog("Shpits","35kg")
        shpits.speak()
    
    Class Interfaces:
        class Animal:
            def __init__(self,name,weight):
                self.name=name
                self.weight=weight
            def speak(self):
                raise NotImplementedError("Not implemented, please add an animal sound")

        class Fish(Animal):
            def breath(self):
                print("blub blub")

        nemo=Fish("Nemo","0.3kg")
        nemo.breath()
        nemo.speak()

    The Super Function:
        A method used in a sub-class method that allows you to use the original method it's inheriting from.
        class Animal:
            def __init__(self,name,weight):
                self.name=name
                self.weight=weight
                self.legNum=4
            def speak(self):
                raise NotImplementedError("Not implemented, please add an animal sound")
            def legNum(self):
                return self.legNum

        class Fish(Animal):
            def breath(self):
                print("blub blub")
            def HowManyLegs(self):
                print(super().legNum()-4)

        class Dog(Animal):
            def HowManyLegs(self):
                print(super().legNum())

        shpits=Dog("Shpits",35)
        shpits.HowManyLegs()

        gizmo=Fish("Gizmo",0.3)
        gizmo.HowManyLegs()
    
    Dunder Methods:
        Methods which begin and end with double underscores, AKA dunders.
        class Book:
            def __init__(self,name,pages,content):
                self.name=name
                self.pages=int(pages)
                self.content=content
            
            def __str__(self):
                return self.name #changes the name of the object via print(objectName)
            
            def __len__(self):
                words=self.content.split()
                return len(words) #returns the length of the object as defined
            

        percyJackson=Book("Percy Jackson", 300, "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.")

        print(percyJackson.__str__())
        print(percyJackson.__len__())

Packages:
    Commands:
        In terminal:
            pip install packagename -> Installs said package on the computer
            pip uinstalls packagename -> uninstalls said package
            pip freeze -> Gives you a list of all the packages installed
        In python terminal:
            from <packagename> import x, y, z - Imports said attributes from said package
    Modules:
        Given 2 python files are in the same folder, you can import one from another and use the functions from the imported one in the one you imported to. The syntax is the same - from <packagename> import x, y, z, only packagename is the file's name.

        MyPackage=package in the desktop
        packagefile=file in the package

        from MyPackage.packagefile import pack as func
        func()

        Given "add" is a function in packagefile, these are the same thing:
            from MyPackage.packagefile import add
            print(add(1,2))

            from MyPackage import packagefile
            print(packagefile.add(1,2))

Name and Main:
    If a program is run where it was written, meaning it wasn't imported, the value of __name__ would be "__main__".
    Meaning, that's a way to check if a function is called from its original file or not. Example:
    if __name__=="__main__":
        do.something()

Errors and Exceptions:
    Errors and exceptions comtain of 3 keywords: try, except and finally. 
    try - tries to execute the code.
    except - tries to handle the error
    finally - will always run no matter What

    Example:
        try:
            total=10/0
        except ZeroDivisionError:
            total="N/A"
        finally:
            print("The total is ", total)
        
    Catching exceptions:
    A way to catch an error and respond to it, having the error not crashing the whole program. Example:
    try:
        print(person["fav_food"])
    except KeyError as e:
        print(f'The key {e} doesnt exist.')
    except ZeroDivisionError:
        print("Cannot divide by zero")
    except Exception as e: --> Reveals errors that weren't dealt with
        print(type(e))
        print(e)        